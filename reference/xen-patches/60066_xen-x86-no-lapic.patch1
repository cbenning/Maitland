From: jbeulich@novell.com
Subject: Disallow all accesses to the local APIC page
Patch-mainline: obsolete
References: 191115

--- head-2009-09-02.orig/arch/x86/include/asm/apic.h	2009-09-02 11:50:24.000000000 +0200
+++ head-2009-09-02/arch/x86/include/asm/apic.h	2009-09-02 12:12:17.000000000 +0200
@@ -10,7 +10,9 @@
 #include <asm/processor.h>
 #include <asm/apicdef.h>
 #include <asm/atomic.h>
+#ifndef CONFIG_XEN
 #include <asm/fixmap.h>
+#endif
 #include <asm/mpspec.h>
 #include <asm/system.h>
 #include <asm/msr.h>
@@ -49,6 +51,7 @@ static inline void generic_apic_probe(vo
 #ifdef CONFIG_X86_LOCAL_APIC
 
 extern unsigned int apic_verbosity;
+#ifndef CONFIG_XEN
 extern int local_apic_timer_c2_ok;
 
 extern int disable_apic;
@@ -111,6 +114,8 @@ extern u64 native_apic_icr_read(void);
 
 extern int x2apic_mode;
 
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_X86_X2APIC
 /*
  * Make previous memory operations globally visible before
@@ -348,6 +353,8 @@ struct apic {
  */
 extern struct apic *apic;
 
+#ifndef CONFIG_XEN
+
 /*
  * APIC functionality to boot other CPUs - only used on SMP:
  */
@@ -441,6 +448,8 @@ static inline void default_wait_for_init
 
 extern void generic_bigsmp_probe(void);
 
+#endif /* CONFIG_XEN */
+
 
 #ifdef CONFIG_X86_LOCAL_APIC
 
@@ -460,6 +469,8 @@ static inline const struct cpumask *defa
 DECLARE_EARLY_PER_CPU(u16, x86_bios_cpu_apicid);
 
 
+#ifndef CONFIG_XEN
+
 static inline unsigned int read_apic_id(void)
 {
 	unsigned int reg;
@@ -571,6 +582,8 @@ static inline physid_mask_t default_apic
 	return physid_mask_of_physid(phys_apicid);
 }
 
+#endif /* CONFIG_XEN */
+
 #endif /* CONFIG_X86_LOCAL_APIC */
 
 #ifdef CONFIG_X86_32
--- head-2009-09-02.orig/arch/x86/include/asm/apicdef.h	2009-09-02 11:33:01.000000000 +0200
+++ head-2009-09-02/arch/x86/include/asm/apicdef.h	2009-09-02 12:12:17.000000000 +0200
@@ -1,6 +1,8 @@
 #ifndef _ASM_X86_APICDEF_H
 #define _ASM_X86_APICDEF_H
 
+#ifndef CONFIG_XEN
+
 /*
  * Constants for various Intel APICs. (local APIC, IOAPIC, etc.)
  *
@@ -133,6 +135,16 @@
 #define APIC_BASE_MSR	0x800
 #define X2APIC_ENABLE	(1UL << 10)
 
+#else /* CONFIG_XEN */
+
+enum {
+	APIC_DEST_ALLBUT = 0x1,
+	APIC_DEST_SELF,
+	APIC_DEST_ALLINC
+};
+
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_X86_32
 # define MAX_IO_APICS 64
 #else
@@ -140,6 +152,8 @@
 # define MAX_LOCAL_APIC 32768
 #endif
 
+#ifndef CONFIG_XEN
+
 /*
  * All x86-64 systems are xAPIC compatible.
  * In the following, "apicid" is a physical APIC ID.
@@ -410,6 +424,8 @@ struct local_apic {
 
 #undef u32
 
+#endif /* CONFIG_XEN */
+
 #ifdef CONFIG_X86_32
  #define BAD_APICID 0xFFu
 #else
--- head-2009-09-02.orig/arch/x86/include/mach-xen/asm/fixmap.h	2009-09-02 11:59:54.000000000 +0200
+++ head-2009-09-02/arch/x86/include/mach-xen/asm/fixmap.h	2009-09-02 12:12:17.000000000 +0200
@@ -17,7 +17,6 @@
 #ifndef __ASSEMBLY__
 #include <linux/kernel.h>
 #include <asm/acpi.h>
-#include <asm/apicdef.h>
 #include <asm/page.h>
 #ifdef CONFIG_X86_32
 #include <linux/threads.h>
@@ -82,10 +81,10 @@ enum fixed_addresses {
 #endif
 	FIX_DBGP_BASE,
 	FIX_EARLYCON_MEM_BASE,
+#ifndef CONFIG_XEN
 #ifdef CONFIG_X86_LOCAL_APIC
 	FIX_APIC_BASE,	/* local (CPU) APIC) -- required for SMP or not */
 #endif
-#ifndef CONFIG_XEN
 #ifdef CONFIG_X86_IO_APIC
 	FIX_IO_APIC_BASE_0,
 	FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + MAX_IO_APICS - 1,
--- head-2009-09-02.orig/arch/x86/include/mach-xen/asm/smp.h	2009-09-02 11:59:54.000000000 +0200
+++ head-2009-09-02/arch/x86/include/mach-xen/asm/smp.h	2009-09-02 12:12:17.000000000 +0200
@@ -15,7 +15,7 @@
 #  include <asm/io_apic.h>
 # endif
 #endif
-#include <asm/thread_info.h>
+#include <linux/thread_info.h>
 #include <asm/cpumask.h>
 
 extern int smp_num_siblings;
@@ -192,7 +192,7 @@ extern unsigned disabled_cpus __cpuinitd
 
 #endif
 
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 
 #ifndef CONFIG_X86_64
 static inline int logical_smp_processor_id(void)
--- head-2009-09-02.orig/arch/x86/kernel/acpi/boot.c	2009-09-02 11:52:29.000000000 +0200
+++ head-2009-09-02/arch/x86/kernel/acpi/boot.c	2009-09-02 12:12:17.000000000 +0200
@@ -71,13 +71,13 @@ int acpi_sci_override_gsi __initdata;
 #ifndef CONFIG_XEN
 int acpi_skip_timer_override __initdata;
 int acpi_use_timer_override __initdata;
-#else
-#define acpi_skip_timer_override 0
-#endif
 
 #ifdef CONFIG_X86_LOCAL_APIC
 static u64 acpi_lapic_addr __initdata = APIC_DEFAULT_PHYS_BASE;
 #endif
+#else
+#define acpi_skip_timer_override 0
+#endif
 
 #ifndef __HAVE_ARCH_CMPXCHG
 #warning ACPI uses CMPXCHG, i486 and later hardware
@@ -136,6 +136,7 @@ static int __init acpi_parse_madt(struct
 		return -ENODEV;
 	}
 
+#ifndef CONFIG_XEN
 	if (madt->address) {
 		acpi_lapic_addr = (u64) madt->address;
 
@@ -143,7 +144,6 @@ static int __init acpi_parse_madt(struct
 		       madt->address);
 	}
 
-#ifndef CONFIG_XEN
 	default_acpi_madt_oem_check(madt->header.oem_id,
 				    madt->header.oem_table_id);
 #endif
@@ -244,6 +244,7 @@ static int __init
 acpi_parse_lapic_addr_ovr(struct acpi_subtable_header * header,
 			  const unsigned long end)
 {
+#ifndef CONFIG_XEN
 	struct acpi_madt_local_apic_override *lapic_addr_ovr = NULL;
 
 	lapic_addr_ovr = (struct acpi_madt_local_apic_override *)header;
@@ -252,6 +253,7 @@ acpi_parse_lapic_addr_ovr(struct acpi_su
 		return -EINVAL;
 
 	acpi_lapic_addr = lapic_addr_ovr->address;
+#endif
 
 	return 0;
 }
@@ -879,10 +881,12 @@ int mp_find_ioapic_pin(int ioapic, int g
 static u8 __init uniq_ioapic_id(u8 id)
 {
 #ifdef CONFIG_X86_32
+#ifndef CONFIG_XEN
 	if ((boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) &&
 	    !APIC_XAPIC(apic_version[boot_cpu_physical_apicid]))
 		return io_apic_get_unique_id(nr_ioapics, id);
 	else
+#endif
 		return id;
 #else
 	int i;
@@ -1157,7 +1161,7 @@ int mp_register_gsi(struct device *dev, 
 
 	ioapic_pin = mp_find_ioapic_pin(ioapic, gsi);
 
-#ifdef CONFIG_X86_32
+#if defined(CONFIG_X86_32) && !defined(CONFIG_XEN)
 	if (ioapic_renumber_irq)
 		gsi = ioapic_renumber_irq(ioapic, gsi);
 #endif
--- head-2009-09-02.orig/arch/x86/kernel/apic/io_apic-xen.c	2009-09-02 12:00:07.000000000 +0200
+++ head-2009-09-02/arch/x86/kernel/apic/io_apic-xen.c	2009-09-02 12:12:17.000000000 +0200
@@ -1096,7 +1096,9 @@ static inline int irq_trigger(int idx)
 	return MPBIOS_trigger(idx);
 }
 
+#ifndef CONFIG_XEN
 int (*ioapic_renumber_irq)(int ioapic, int irq);
+#endif
 static int pin_2_irq(int idx, int apic, int pin)
 {
 	int irq, i;
@@ -1118,11 +1120,13 @@ static int pin_2_irq(int idx, int apic, 
 		while (i < apic)
 			irq += nr_ioapic_registers[i++];
 		irq += pin;
+#ifndef CONFIG_XEN
 		/*
                  * For MPS mode, so far only needed by ES7000 platform
                  */
 		if (ioapic_renumber_irq)
 			irq = ioapic_renumber_irq(apic, irq);
+#endif
 	}
 
 #ifdef CONFIG_X86_32
--- head-2009-09-02.orig/arch/x86/kernel/irq-xen.c	2009-09-02 11:59:54.000000000 +0200
+++ head-2009-09-02/arch/x86/kernel/irq-xen.c	2009-09-02 12:12:17.000000000 +0200
@@ -15,7 +15,9 @@
 #include <asm/mce.h>
 #include <asm/hw_irq.h>
 
+#ifndef CONFIG_XEN
 atomic_t irq_err_count;
+#endif
 
 /* Function pointer for generic interrupt vector handling */
 void (*generic_interrupt_extension)(void) = NULL;
@@ -55,7 +57,7 @@ static int show_other_interrupts(struct 
 	for_each_online_cpu(j)
 		seq_printf(p, "%10u ", irq_stats(j)->__nmi_count);
 	seq_printf(p, "  Non-maskable interrupts\n");
-#ifdef CONFIG_X86_LOCAL_APIC
+#if defined(CONFIG_X86_LOCAL_APIC) && !defined(CONFIG_XEN)
 	seq_printf(p, "%*s: ", prec, "LOC");
 	for_each_online_cpu(j)
 		seq_printf(p, "%10u ", irq_stats(j)->apic_timer_irqs);
@@ -118,10 +120,12 @@ static int show_other_interrupts(struct 
 		seq_printf(p, "%10u ", per_cpu(mce_poll_count, j));
 	seq_printf(p, "  Machine check polls\n");
 #endif
+#ifndef CONFIG_XEN
 	seq_printf(p, "%*s: %10u\n", prec, "ERR", atomic_read(&irq_err_count));
 #if defined(CONFIG_X86_IO_APIC)
 	seq_printf(p, "%*s: %10u\n", prec, "MIS", atomic_read(&irq_mis_count));
 #endif
+#endif
 	return 0;
 }
 
@@ -215,12 +219,16 @@ u64 arch_irq_stat_cpu(unsigned int cpu)
 
 u64 arch_irq_stat(void)
 {
+#ifndef CONFIG_XEN
 	u64 sum = atomic_read(&irq_err_count);
 
 #ifdef CONFIG_X86_IO_APIC
 	sum += atomic_read(&irq_mis_count);
 #endif
 	return sum;
+#else
+	return 0;
+#endif
 }
 
 
--- head-2009-09-02.orig/arch/x86/kernel/mpparse-xen.c	2009-09-02 11:59:54.000000000 +0200
+++ head-2009-09-02/arch/x86/kernel/mpparse-xen.c	2009-09-02 12:12:17.000000000 +0200
@@ -282,7 +282,9 @@ static int __init smp_check_mpc(struct m
 
 	printk(KERN_INFO "MPTABLE: Product ID: %s\n", str);
 
+#ifndef CONFIG_XEN
 	printk(KERN_INFO "MPTABLE: APIC at: 0x%X\n", mpc->lapic);
+#endif
 
 	return 1;
 }
@@ -312,12 +314,14 @@ static int __init smp_read_mpc(struct mp
 	if (!smp_check_mpc(mpc, oem, str))
 		return 0;
 
-#if defined(CONFIG_X86_32) && !defined(CONFIG_XEN)
+#ifndef CONFIG_XEN
+#ifdef CONFIG_X86_32
 	generic_mps_oem_check(mpc, oem, str);
 #endif
 	/* save the local APIC address, it might be non-default */
 	if (!acpi_lapic)
 		mp_lapic_addr = mpc->lapic;
+#endif
 
 	if (early)
 		return 1;
@@ -515,10 +519,12 @@ static inline void __init construct_defa
 	int linttypes[2] = { mp_ExtINT, mp_NMI };
 	int i;
 
+#ifndef CONFIG_XEN
 	/*
 	 * local APIC has default address
 	 */
 	mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
+#endif
 
 	/*
 	 * 2 CPUs, numbered 0 & 1.
@@ -656,10 +662,12 @@ static void __init __get_smp_config(unsi
 	 */
 	if (mpf->feature1 != 0) {
 		if (early) {
+#ifndef CONFIG_XEN
 			/*
 			 * local APIC has default address
 			 */
 			mp_lapic_addr = APIC_DEFAULT_PHYS_BASE;
+#endif
 			return;
 		}
 
--- head-2009-09-02.orig/drivers/xen/core/smpboot.c	2009-09-02 12:10:21.000000000 +0200
+++ head-2009-09-02/drivers/xen/core/smpboot.c	2009-09-02 12:12:17.000000000 +0200
@@ -355,7 +355,7 @@ void __init smp_prepare_cpus(unsigned in
 	 * Here we can be sure that there is an IO-APIC in the system. Let's
 	 * go and set it up:
 	 */
-	if (!skip_ioapic_setup && nr_ioapics)
+	if (cpu_has_apic && !skip_ioapic_setup && nr_ioapics)
 		setup_IO_APIC();
 #endif
 }
