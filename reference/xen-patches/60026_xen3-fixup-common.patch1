Subject: Fix xen build.
From: jbeulich@novell.com
Patch-mainline: obsolete

--- 11.2-2009-11-12.orig/drivers/acpi/acpica/hwsleep.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/acpi/acpica/hwsleep.c	2009-09-02 11:50:43.000000000 +0200
@@ -416,6 +416,7 @@ ACPI_EXPORT_SYMBOL(acpi_enter_sleep_stat
  *              THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED
  *
  ******************************************************************************/
+#ifndef CONFIG_XEN
 acpi_status asmlinkage acpi_enter_sleep_state_s4bios(void)
 {
 	u32 in_value;
@@ -469,6 +470,7 @@ acpi_status asmlinkage acpi_enter_sleep_
 }
 
 ACPI_EXPORT_SYMBOL(acpi_enter_sleep_state_s4bios)
+#endif
 
 /*******************************************************************************
  *
--- 11.2-2009-11-12.orig/drivers/acpi/processor_perflib.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/acpi/processor_perflib.c	2009-12-03 15:24:07.000000000 +0100
@@ -166,7 +166,7 @@ int acpi_processor_ppc_has_changed(struc
 	else
 #ifdef CONFIG_CPU_FREQ
 		return cpufreq_update_policy(pr->id);
-#elif CONFIG_PROCESSOR_EXTERNAL_CONTROL
+#elif defined(CONFIG_PROCESSOR_EXTERNAL_CONTROL)
 		return processor_notify_external(pr,
 				PROCESSOR_PM_CHANGE, PM_TYPE_PERF);
 #endif
--- 11.2-2009-11-12.orig/drivers/base/cpu.c	2009-12-03 15:25:41.000000000 +0100
+++ 11.2-2009-11-12/drivers/base/cpu.c	2009-09-02 11:50:43.000000000 +0200
@@ -78,7 +78,7 @@ static inline void register_cpu_control(
 }
 #endif /* CONFIG_HOTPLUG_CPU */
 
-#ifdef CONFIG_KEXEC
+#if defined(CONFIG_KEXEC) && !defined(CONFIG_XEN)
 #include <linux/kexec.h>
 
 static ssize_t show_crash_notes(struct sys_device *dev, struct sysdev_attribute *attr,
@@ -217,7 +217,7 @@ int __cpuinit register_cpu(struct cpu *c
 	if (!error)
 		register_cpu_under_node(num, cpu_to_node(num));
 
-#ifdef CONFIG_KEXEC
+#if defined(CONFIG_KEXEC) && !defined(CONFIG_XEN)
 	if (!error)
 		error = sysdev_create_file(&cpu->sysdev, &attr_crash_notes);
 #endif
--- 11.2-2009-11-12.orig/drivers/ide/ide-lib.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/ide/ide-lib.c	2009-09-02 11:50:43.000000000 +0200
@@ -18,6 +18,16 @@ void ide_toggle_bounce(ide_drive_t *driv
 {
 	u64 addr = BLK_BOUNCE_HIGH;	/* dma64_addr_t */
 
+#ifndef CONFIG_XEN
+	if (!PCI_DMA_BUS_IS_PHYS) {
+		addr = BLK_BOUNCE_ANY;
+	} else if (on && drive->media == ide_disk) {
+		struct device *dev = drive->hwif->dev;
+
+		if (dev && dev->dma_mask)
+			addr = *dev->dma_mask;
+	}
+#else
 	if (on && drive->media == ide_disk) {
 		struct device *dev = drive->hwif->dev;
 
@@ -26,6 +36,7 @@ void ide_toggle_bounce(ide_drive_t *driv
 		else if (dev && dev->dma_mask)
 			addr = *dev->dma_mask;
 	}
+#endif
 
 	if (drive->queue)
 		blk_queue_bounce_limit(drive->queue, addr);
--- 11.2-2009-11-12.orig/drivers/oprofile/buffer_sync.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/oprofile/buffer_sync.c	2009-09-02 11:50:43.000000000 +0200
@@ -46,7 +46,9 @@ static cpumask_var_t marked_cpus;
 static DEFINE_SPINLOCK(task_mortuary);
 static void process_task_mortuary(void);
 
+#ifdef CONFIG_XEN
 static int cpu_current_domain[NR_CPUS];
+#endif
 
 /* Take ownership of the task struct and place it on the
  * list for processing. Only after two full buffer syncs
@@ -158,11 +160,13 @@ static void end_sync(void)
 int sync_start(void)
 {
 	int err;
+#ifdef CONFIG_XEN
 	int i;
 
 	for (i = 0; i < NR_CPUS; i++) {
 		cpu_current_domain[i] = COORDINATOR_DOMAIN;
 	}
+#endif
 
 	if (!alloc_cpumask_var(&marked_cpus, GFP_KERNEL))
 		return -ENOMEM;
@@ -313,12 +317,14 @@ static void add_cpu_mode_switch(unsigned
 	}
 }
 
+#ifdef CONFIG_XEN
 static void add_domain_switch(unsigned long domain_id)
 {
 	add_event_entry(ESCAPE_CODE);
 	add_event_entry(DOMAIN_SWITCH_CODE);
 	add_event_entry(domain_id);
 }
+#endif
 
 static void
 add_user_ctx_switch(struct task_struct const *task, unsigned long cookie)
@@ -541,10 +547,12 @@ void sync_buffer(int cpu)
 
 	add_cpu_switch(cpu);
 
+#ifdef CONFIG_XEN
 	/* We need to assign the first samples in this CPU buffer to the
 	   same domain that we were processing at the last sync_buffer */
 	if (cpu_current_domain[cpu] != COORDINATOR_DOMAIN)
 		add_domain_switch(cpu_current_domain[cpu]);
+#endif
 
 	op_cpu_buffer_reset(cpu);
 	available = op_cpu_buffer_entries(cpu);
@@ -554,12 +562,14 @@ void sync_buffer(int cpu)
 		if (!sample)
 			break;
 
+#ifdef CONFIG_XEN
 		if (domain_switch) {
 			cpu_current_domain[cpu] = sample->eip;
 			add_domain_switch(sample->eip);
 			domain_switch = 0;
 			continue;
 		}
+#endif
 
 		if (is_code(sample->eip)) {
 			flags = sample->event;
@@ -585,17 +595,21 @@ void sync_buffer(int cpu)
 					cookie = get_exec_dcookie(mm);
 				add_user_ctx_switch(new, cookie);
 			}
+#ifdef CONFIG_XEN
 			if (flags & DOMAIN_SWITCH)
 				domain_switch = 1;
+#endif
 			if (op_cpu_buffer_get_size(&entry))
 				add_data(&entry, mm);
 			continue;
 		}
 
+#ifdef CONFIG_XEN
 		if (cpu_current_domain[cpu] != COORDINATOR_DOMAIN) {
 			add_sample_entry(sample->eip, sample->event);
 			continue;
 		}
+#endif
 
 		if (state < sb_bt_start)
 			/* ignore sample */
@@ -612,9 +626,11 @@ void sync_buffer(int cpu)
 	}
 	release_mm(mm);
 
+#ifdef CONFIG_XEN
 	/* We reset domain to COORDINATOR at each CPU switch */
 	if (cpu_current_domain[cpu] != COORDINATOR_DOMAIN)
 		add_domain_switch(COORDINATOR_DOMAIN);
+#endif
 
 	mark_done(cpu);
 
--- 11.2-2009-11-12.orig/drivers/oprofile/cpu_buffer.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/oprofile/cpu_buffer.c	2009-09-02 11:50:43.000000000 +0200
@@ -59,7 +59,11 @@ static void wq_sync_buffer(struct work_s
 #define DEFAULT_TIMER_EXPIRE (HZ / 10)
 static int work_enabled;
 
+#ifndef CONFIG_XEN
+#define current_domain COORDINATOR_DOMAIN
+#else
 static int32_t current_domain = COORDINATOR_DOMAIN;
+#endif
 
 unsigned long oprofile_get_cpu_buffer_size(void)
 {
@@ -449,6 +453,7 @@ fail:
 	return;
 }
 
+#ifdef CONFIG_XEN
 int oprofile_add_domain_switch(int32_t domain_id)
 {
 	struct oprofile_cpu_buffer * cpu_buf = &cpu_buffer[smp_processor_id()];
@@ -467,6 +472,7 @@ int oprofile_add_domain_switch(int32_t d
 
 	return 1;
 }
+#endif
 
 /*
  * This serves to avoid cpu buffer overflow, and makes sure
--- 11.2-2009-11-12.orig/drivers/oprofile/oprof.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/oprofile/oprof.c	2009-09-02 11:50:43.000000000 +0200
@@ -37,6 +37,7 @@ static DEFINE_MUTEX(start_mutex);
  */
 static int timer = 0;
 
+#ifdef CONFIG_XEN
 int oprofile_set_active(int active_domains[], unsigned int adomains)
 {
 	int err;
@@ -62,6 +63,7 @@ int oprofile_set_passive(int passive_dom
 	mutex_unlock(&start_mutex);
 	return err;
 }
+#endif
 
 int oprofile_setup(void)
 {
--- 11.2-2009-11-12.orig/drivers/oprofile/oprofile_files.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/drivers/oprofile/oprofile_files.c	2009-09-02 11:50:43.000000000 +0200
@@ -129,6 +129,8 @@ static const struct file_operations dump
 	.write		= dump_write,
 };
 
+#ifdef CONFIG_XEN
+
 #define TMPBUFSIZE 512
 
 static unsigned int adomains = 0;
@@ -318,6 +320,8 @@ static const struct file_operations pass
 	.write		= pdomain_write,
 };
 
+#endif /* CONFIG_XEN */
+
 void oprofile_create_files(struct super_block *sb, struct dentry *root)
 {
 	/* reinitialize default values */
@@ -327,8 +331,10 @@ void oprofile_create_files(struct super_
 
 	oprofilefs_create_file(sb, root, "enable", &enable_fops);
 	oprofilefs_create_file_perm(sb, root, "dump", &dump_fops, 0666);
+#ifdef CONFIG_XEN
 	oprofilefs_create_file(sb, root, "active_domains", &active_domain_ops);
 	oprofilefs_create_file(sb, root, "passive_domains", &passive_domain_ops);
+#endif
 	oprofilefs_create_file(sb, root, "buffer", &event_buffer_fops);
 	oprofilefs_create_ulong(sb, root, "buffer_size", &oprofile_buffer_size);
 	oprofilefs_create_ulong(sb, root, "buffer_watershed", &oprofile_buffer_watershed);
--- 11.2-2009-11-12.orig/include/linux/mm.h	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/include/linux/mm.h	2009-09-02 11:50:43.000000000 +0200
@@ -204,6 +204,7 @@ struct vm_operations_struct {
 	int (*access)(struct vm_area_struct *vma, unsigned long addr,
 		      void *buf, int len, int write);
 
+#ifdef CONFIG_XEN
 	/* Area-specific function for clearing the PTE at @ptep. Returns the
 	 * original value of @ptep. */
 	pte_t (*zap_pte)(struct vm_area_struct *vma,
@@ -211,6 +212,7 @@ struct vm_operations_struct {
 
 	/* called before close() to indicate no more pages should be mapped */
 	void (*unmap)(struct vm_area_struct *area);
+#endif
 
 #ifdef CONFIG_NUMA
 	/*
--- 11.2-2009-11-12.orig/include/linux/oprofile.h	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/include/linux/oprofile.h	2009-09-02 11:50:43.000000000 +0200
@@ -16,8 +16,9 @@
 #include <linux/types.h>
 #include <linux/spinlock.h>
 #include <asm/atomic.h>
-
+#ifdef CONFIG_XEN
 #include <xen/interface/xenoprof.h>
+#endif
  
 /* Each escaped entry is prefixed by ESCAPE_CODE
  * then one of the following codes, then the
@@ -55,11 +56,12 @@ struct oprofile_operations {
 	/* create any necessary configuration files in the oprofile fs.
 	 * Optional. */
 	int (*create_files)(struct super_block * sb, struct dentry * root);
+#ifdef CONFIG_XEN
 	/* setup active domains with Xen */
 	int (*set_active)(int *active_domains, unsigned int adomains);
 	/* setup passive domains with Xen */
 	int (*set_passive)(int *passive_domains, unsigned int pdomains);
-
+#endif
 	/* Do any necessary interrupt setup. Optional. */
 	int (*setup)(void);
 	/* Do any necessary interrupt shutdown. Optional. */
--- 11.2-2009-11-12.orig/kernel/kexec.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/kernel/kexec.c	2009-09-02 11:50:43.000000000 +0200
@@ -45,8 +45,10 @@
 #include <asm/system.h>
 #include <asm/sections.h>
 
+#ifndef CONFIG_XEN
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
+#endif

 /* vmcoreinfo stuff */
 static unsigned char vmcoreinfo_data[VMCOREINFO_BYTES];
@@ -1168,6 +1170,7 @@ static void final_note(u32 *buf)
 	memcpy(buf, &note, sizeof(note));
 }
 
+#ifndef CONFIG_XEN
 void crash_save_cpu(struct pt_regs *regs, int cpu)
 {
 	struct elf_prstatus prstatus;
@@ -1193,6 +1196,7 @@ void crash_save_cpu(struct pt_regs *regs
 		      	      &prstatus, sizeof(prstatus));
 	final_note(buf);
 }
+#endif
 
 #ifdef CONFIG_SYSCTL
 static ctl_table dump_after_notifier_table[] = {
@@ -1220,6 +1224,7 @@ static ctl_table kexec_sys_table[] = {
 
 static int __init crash_notes_memory_init(void)
 {
+#ifndef CONFIG_XEN
 	/* Allocate memory for saving cpu registers. */
 	crash_notes = alloc_percpu(note_buf_t);
 	if (!crash_notes) {
@@ -1227,6 +1232,7 @@ static int __init crash_notes_memory_ini
 		" states failed\n");
 		return -ENOMEM;
 	}
+#endif
 	return 0;
 }
 module_init(crash_notes_memory_init)
--- 11.2-2009-11-12.orig/mm/memory.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/mm/memory.c	2009-09-02 11:50:43.000000000 +0200
@@ -812,10 +812,12 @@ static unsigned long zap_pte_range(struc
 				     page->index > details->last_index))
 					continue;
 			}
+#ifdef CONFIG_XEN
 			if (unlikely(vma->vm_ops && vma->vm_ops->zap_pte))
 				ptent = vma->vm_ops->zap_pte(vma, addr, pte,
 							     tlb->fullmm);
 			else
+#endif
 				ptent = ptep_get_and_clear_full(mm, addr, pte,
 								tlb->fullmm);
 			tlb_remove_tlb_entry(tlb, pte, addr);
--- 11.2-2009-11-12.orig/mm/mmap.c	2009-09-02 11:50:15.000000000 +0200
+++ 11.2-2009-11-12/mm/mmap.c	2009-09-02 11:50:43.000000000 +0200
@@ -1844,8 +1844,10 @@ static void unmap_region(struct mm_struc
 
 static inline void unmap_vma(struct vm_area_struct *vma)
 {
+#ifdef CONFIG_XEN
 	if (unlikely(vma->vm_ops && vma->vm_ops->unmap))
 		vma->vm_ops->unmap(vma);
+#endif
 }
 
 /*
@@ -2164,8 +2166,10 @@ void exit_mmap(struct mm_struct *mm)
 
 	arch_exit_mmap(mm);
 
+#ifdef CONFIG_XEN
 	for (vma = mm->mmap; vma; vma = vma->vm_next)
 		unmap_vma(vma);
+#endif
 
 	vma = mm->mmap;
 	if (!vma)	/* Can happen if dup_mmap() received an OOM */
